class dsu{
    public:
    vector<int> p;
    vector<int> s;
    vector<int> inf;
    dsu(int n){
        p.resize(n);
        iota(p.begin(),p.end(),0);
        s.resize(n,1);
        inf.resize(n,0);
    }
    
    int get(int n){
        if(p[n] == n) return n;
        return p[n] = get(p[n]);
    }
    bool unite(int a,int b){
        int p1 = get(a);
        int p2 = get(b);
        if(p1 == p2){
            return false;
        }
        p[p1] = p2;
        s[p2] += s[p1];
        return true;
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        set<int> In;
        dsu D(n);
        for(auto x : initial) In.insert(x);
        for(int i = 0 ; i < n ; i++){
            if(In.find(i) != In.end())
                continue;
            for(int j = 0 ; j < n ; j++){
                if(graph[i][j] == 0 || In.find(j) != In.end())
                    continue;
                D.unite(i,j);
            }
        }
        for(int i = 0 ; i < n ; i++){
            cout<<D.p[i]<<" ";
        }
        cout<<"\n";
        for(auto infNode : initial){
            set<int> P;
            for(int i = 0 ; i < n ; i++){
                if(graph[infNode][i] == 0 || i == infNode || In.find(i) != In.end())
                    continue;
                int p1 = D.get(i);
                if(P.find(p1) != P.end()) continue;
                D.inf[p1]++;
                P.insert(p1);
            }
            cout<<"\n";
        }
        
        int ans = *In.begin();
        int max_ = INT_MIN;
        
        
        for(int i = 0 ; i < n ; i++){
            cout<<D.inf[i]<<" ";
        }
        cout<<"\n";
        
        for(int i = 0 ; i < n ; i++){
            cout<<D.s[i]<<" ";
        }
        cout<<"\n";
        for(auto infNode : In){
            int cnt = 0;
            set<int> P;
            for(int i = 0 ; i < n ; i++){
                if(graph[infNode][i] == 0 || i == infNode || In.find(i) != In.end())
                    continue;
                int p1 = D.get(i);
                if(P.find(p1) != P.end()){
                    continue;
                }
                P.insert(p1);
                if(D.inf[p1] == 1){
                    cnt += D.s[p1];
                }
            }
            if(cnt > max_){
                ans = infNode;
                max_ = cnt;
            }
        }
        return ans;
    }
};